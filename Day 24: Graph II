Problem 1- Maximum Number of Non-Overlapping Substrings
sol-
class Solution {
public:
    vector<string> maxNumOfSubstrings(string s) {
        vector<vector<int>> v;
        vector<pair<int,int>> notes (26,make_pair(10000000,-1));
        int n = s.size();
        for(int i=0;i<n;i++){
            int ind = s[i]-'a';
            notes[ind].first = min(notes[ind].first,i);
            notes[ind].second = max(notes[ind].second,i);
        }
        for(int i=0;i<26;i++){
            if(notes[i].second!=-1){
                int maxx = notes[i].second;
                int minn = notes[i].first;
                for(int ind=minn;ind<=maxx;ind++){
                    maxx = max(maxx,notes[s[ind]-'a'].second);
                    minn = min(minn,notes[s[ind]-'a'].first);
                }
                if(minn==notes[i].first){
                    v.push_back({minn,maxx});
                }
            }
        }
        sort(v.begin(),v.end(),[](vector<int>& a,vector<int>& b){
            return ((a[1]-a[0])<(b[1]-b[0]));
        });
        set<pair<int,int>> myset;
        vector<string> ans;
        for(auto x : v){
            if(!myset.empty()){
                auto it = upper_bound(myset.begin(),myset.end(),make_pair(x[0],x[1]));
                if(it!=myset.begin()){
                    auto back = *(prev(it));
                    if(back.second>=x[0]) continue;
                }
                if(it!=myset.end()){
                    auto nex = (*(it));
                    if(nex.first<=x[1]) continue;
                }
            }
            myset.insert(make_pair(x[0],x[1]));
            string curr="";
            for(int j=x[0];j<=x[1];j++){
                curr+=s[j];
            }
            ans.push_back(curr);
        }
        return ans;
    }
};
Problem 2-Implementing Dijkstra Algorithm
sol-
class Solution
{
    static class pair implements Comparable<pair>{
        int dist;
        int node;
        
        public pair(int dist, int node) {
            this.dist = dist;
            this.node = node;
        }
        
        @Override
        public int compareTo(pair p1) {
            return this.dist - p1.dist;
        }
    }
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        PriorityQueue<pair> pq = new PriorityQueue<>();
        int dist[] = new int[V];
        for(int i=0; i<V; i++) {
            dist[i] = (int)1e9;
        }
        dist[S] = 0;
        pq.add(new pair(0, S));
        
        while(!pq.isEmpty()) {
            int node = pq.peek().node;
            int distance = pq.peek().dist;
            pq.remove();
            
            for(int i=0; i<adj.get(node).size(); i++) {
                int edgeWeight = adj.get(node).get(i).get(1);
                int adjNode = adj.get(node).get(i).get(0);
                
                if(edgeWeight + distance < dist[adjNode]) {
                    dist[adjNode] = edgeWeight + distance;
                    pq.add(new pair(dist[adjNode], adjNode));
                }
            }
        }
        return dist;
    }
Problem 3-Distance from the Source (Bellman-Ford Algorithm)
sol-
    vector<int> distance(V, 1e8);
        distance[S] = 0;
        for(int i=1;i<=V-1;++i){
            for(int j=0;j<edges.size();++j){
                int u = edges[j][0];
                int v = edges[j][1];;
                int wt = edges[j][2];
                if(distance[u] != 1e8 && distance[u] + wt < distance[v]){
                    distance[v] =  distance[u] + wt;
                }
            }
        }
        
           /// to check for negative cycle 
           
            for(int j=0;j<edges.size();++j)
            {
                int u = edges[j][0];
                int v = edges[j][1];;
                int wt = edges[j][2];
                if(distance[u] != 1e8 && distance[u] + wt < distance[v]){
                    
                    vector<int> V(1);
                    
                    V[0] = -1;
                    
                    return V;
                }
            }
        
        
        
        
 
        return distance;
    }
Problem 4-Floyd Warshall
sol-
int n = matrix.length;
        
        for(int i =0;i<n;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==-1) matrix[i][j]=(int)1e9;
                
                if(i==j) matrix[i][j]=0;
            }
        }
        
        for(int k=0;k<n;k++){
            for(int i= 0;i<n;i++){
                for(int j=0;j<n;j++){
                    matrix[i][j]=Math.min(matrix[i][j],matrix[i][k]+matrix[k][j]);
                }
            }
        }
        
         for(int i =0;i<n;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==(int)1e9) matrix[i][j]=-1;
                
                if(i==j) matrix[i][j]=0;
            }
        }
Problem 5-Minimum Spanning Tree
sol-
int spanningTree(int V, vector<vector<int>> adj[])
    {
        int ans = 0;
        
        vector<int> key(V, INT_MAX);
        
        vector<bool> mst(V, false);
        
        vector<int> parent(V, -1);
        
        key[0] = 0;
        
        for(int i = 0; i < V; i++)
        {
            int mini = INT_MAX;
            
            int u;
            
            
            for(int j = 0; j < V; j++)
            {
                if(mst[j] == false && key[j] < mini)
                {
                    u = j;
                    mini = key[j];
                }
            }
            
            mst[u] = true;
            
            for(auto x: adj[u])
            {
                int v = x[0];
                int w = x[1];
                
                if(mst[v] == false && w < key[v])
                {
                    parent[v] = u;
                    key[v] = w;
                    
                }
            }
        }
        
        for(int i = 1; i < V; i++)
        {
            ans += key[i];
        }
        
        return ans;
    }
