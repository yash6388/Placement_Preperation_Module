Problem 1- Permutations
sol-
  void solve(vector<int> nums,vector<vector<int>>& ans,int index){
         if(index>=nums.size()){
            ans.push_back(nums);
            return;
        }
        for(int j= index;j<nums.size();j++){
            swap(nums[index],nums[j]);
            solve(nums,ans,index+1);
            //backtrack
            swap(nums[index],nums[j]);
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        int index=0;
        solve(nums,ans,index);
        return ans;
    }
Problem 2- N-Queens
sol-
class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));

        // Hashing for rows
        vector<int> row_check(n, 0);

        // Hashing for lower diagonal
        vector<int> lower_diagonal(2 * n - 1, 0);

        // Hashing for upper diagonal
        vector<int> upper_diagonal(2 * n - 1, 0);

        solve(n, 0, row_check, lower_diagonal, upper_diagonal, ans, board);

        return ans;
    }

    void solve(int n, int col, vector<int>& row_check, vector<int>& lower_diagonal, vector<int>& upper_diagonal, vector<vector<string>>& ans, vector<string>& board) {
        if (col == n) {
            ans.push_back(board);
            return;
        }

        for (int row = 0; row < n; row++) {
            if (row_check[row] == 0 && lower_diagonal[row + col] == 0 && upper_diagonal[n - 1 + col - row] == 0) {
                row_check[row] = 1;
                lower_diagonal[row + col] = 1;
                upper_diagonal[n - 1 + col - row] = 1;

                board[row][col] = 'Q'; 
                solve(n, col + 1, row_check, lower_diagonal, upper_diagonal, ans, board);
                row_check[row] = 0;
                lower_diagonal[row + col] = 0;
                upper_diagonal[n - 1 + col - row] = 0;
                board[row][col] = '.'; 
            }
        }
Problem 3-Sudoku Solver
sol-
class Solution {
private:
    bool isSafe(int row, int col, vector<vector<char> >&board, char val) {
        for(int i=0;i<board.size();i++) {
            if(board[row][i] == val || board[i][col] == val) {
                return false;
            }
            if(board[3*(row/3) + i/3][3*(col/3) + i%3] == val) {
                return false;
            }
        }
        return true;
    }
    bool solve(vector<vector<char> >&board) {
        int n = board.size();

        for(int row = 0; row < n;row ++) {
            for(int col = 0;col < n;col ++) {
                if(board[row][col] == '.') {
                    for(char val = '1';val<='9';val++) {
                        if(isSafe(row, col, board, val)) {
                            board[row][col] = val;
                            bool SolutionPossible = solve(board);
                            if(SolutionPossible) {
                                return true;
                            }
                            else {
                                board[row][col] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};

Problem 4-Rat in a Maze Problem - I
sol-
void find_ans(vector<vector<int>> m, int i, int j, int n, string s,vector<string>& ans){
        if(i==(n-1) && j==(n-1) && m[i][j]==1){
            ans.push_back(s);
            return;
        }
        
        if(i<0 || j<0 || i>=n || j>=n)
            return;
            
        if(m[i][j]==0)
            return;
            
        m[i][j]=0;
        
        find_ans(m,i-1,j,n,s+'U',ans);
        find_ans(m,i,j-1,n,s+'L',ans);
        find_ans(m,i+1,j,n,s+'D',ans);
        find_ans(m,i,j+1,n,s+'R',ans);
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        if(m[0][0]==0)
            return {"-1"};
            
        vector<string> ans;
        string s;
        find_ans(m,0,0,n,s,ans);
        
        if(ans.size()==0)
            return {"-1"};
            
        return ans;
Problem 5- M-Coloring Problem
sol-
bool solve(int prev_col, int idx, vector<vector<int>>& g, int m, vector<int>& col) {
        if (col[idx] != 0) {
            if (col[idx] == prev_col)
                return false;
            else
                return true;
        }

        for (int i = 1; i <= m; i++) {
            if (i == prev_col) // Skip the color that is used for the previous vertex
                continue;

            col[idx] = i;
            int flag = 1;
            for (auto itr : g[idx]) {
                if (!solve(i, itr, g, m, col)) {
                    flag = 0;
                    break;
                }
            }
            if (flag)
                return true;
            col[idx] = 0; // Backtrack and try a different color
        }
        return false;
    }

    bool graphColoring(bool graph[101][101], int m, int n) {
        vector<vector<int>> g(n);
        int i, j;
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (graph[i][j]) {
                    g[i].push_back(j);
                    g[j].push_back(i);
                }
            }
        }

        vector<int> col(n);
        return solve(-1, 0, g, m, col);
    }
};

