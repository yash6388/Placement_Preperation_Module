Problem 1-Kth Smallest Element in a BST
sol-
int solve(TreeNode* root,int& i, int k){
    if(root==NULL)
    return -1;
    //L
    int left = solve(root->left,i,k);
    if(left!=-1)
    return left;
    //N
    i++;
    if(i==k){
        return root->val;
    }
    //R
    return solve(root->right,i,k);
}
    int kthSmallest(TreeNode* root, int k) {
        int i=0;
        int ans = solve(root,i,k);
        return ans;
    }
Problem 2-Kth largest element in BST
sol-
void inorder(Node *root, vector<int> &ans)
    {
        if(root == NULL)
            return;
        
        inorder(root->left, ans);
        ans.push_back(root->data);
        inorder(root->right, ans);
    }
    
    int kthLargest(Node *root, int K)
    {
        //Your code here
        if(root == NULL)
            return -1;
    
        vector<int> ans;
        inorder(root, ans);
        
        int n = ans.size();
        return ans[n - K];
    }
Problem 3-Two Sum IV - Input is a BST
sol-
ector<int> v;
		void solve(TreeNode* root)
		{
			if(root == NULL)
			{
				return;
			}
			solve(root->left);
			v.push_back(root->val);
			solve(root->right);
		}
		bool findTarget(TreeNode* root, int k) {
			solve(root);
			int i = 0,j = v.size()-1;
			while(i < j)
			{
				int sum = v[i] + v[j];
				if(sum == k)
				{
					return true;
				}
				else if(sum < k)
				{
					i++;
				}
				else
				{
					j--;
				}
			}
			return false;
	
    }
Problem 4-Binary Search Tree Iterator
sol-
vector<int>v;
    int i=0;
    BSTIterator(TreeNode* root) {
        solution(root) ;
    }
    void solution(TreeNode *root){
        if(root){
            solution(root->left);
            v.push_back(root->val);
            solution(root->right);
        }   
        return; 
    }
    int next() {
        return v[i++];
    }
    bool hasNext() {
        return i<v.size();
        
    }
Problem 5-Binary Search Tree Iterator
sol-
 vector<int>v;
    int i=0;
    BSTIterator(TreeNode* root) {
        solution(root) ;
    }
    void solution(TreeNode *root){
        if(root){
            solution(root->left);
            v.push_back(root->val);
            solution(root->right);
        }   
        return; 
    }
    int next() {
        return v[i++];
    }
    bool hasNext() {
        return i<v.size();
        
    }

