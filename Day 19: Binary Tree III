Problem 1-Binary Tree Maximum Path Sum
sol-
int solve(TreeNode* root,int &res){
    if(root==NULL) return 0;
    int l=solve(root->left,res);
    int r=solve(root->right,res);
    int temp=max(max(l,r)+root->val,root->val);
    int ans=max(temp,l+r+root->val);
    res=max(res,ans);
    return temp;
}
    int maxPathSum(TreeNode* root) {
        int res=INT_MIN;
        solve(root,res);
        return res;
        
    }
Problem 2-Construct Binary Tree from Preorder and Inorder Traversal
sol-
 TreeNode* constructTree(vector<int>& preorder, int preStart, int preEnd, vector<int>& inorder, int inStart, int inEnd, map<int,int>& mp) {
  if (preStart > preEnd || inStart > inEnd) {
    return NULL;
  }
  TreeNode* root = new TreeNode(preorder[preStart]);
  int elem = mp[root->val];
  int nElem = elem - inStart;
  root->left = constructTree(preorder, preStart + 1, preStart + nElem, inorder, inStart, elem - 1, mp);
  root->right = constructTree(preorder, preStart + nElem + 1, preEnd, inorder, elem + 1, inEnd, mp);

  return root;
}
TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
  int preStart = 0, preEnd = preorder.size() - 1;
  int inStart = 0, inEnd = inorder.size() - 1;
  
  // Create a map that maps each element in the inorder vector to its index
  map<int,int> mp;
  for (int i = inStart; i <= inEnd; i++) {
    mp[inorder[i]] = i;
  }
  return constructTree(preorder, preStart, preEnd, inorder, inStart, inEnd, mp);
    }
Problem 3-Flatten Binary Tree to Linked List
sol-
class Solution {
public:
    TreeNode* prev = nullptr; // Global variable to keep track of the previous node in the flattened tree.

    void flatten(TreeNode* root) {
        if (root == nullptr) {
            return;
        }

        // Recursive calls to flatten the right and left subtrees.
        flatten(root->right);
        flatten(root->left);

        // Rearrange the tree nodes.
        root->right = prev;
        root->left = nullptr;
        prev = root;
    }
};
Problem 4-Mirror Tree
sol-
void mirror(Node* node) {
        // code here
        if(node==NULL){
            return;
        }
        Node* temp;
        temp = node->left;
        node->left = node->right;
        node->right = temp;
        mirror(node->left);
        mirror(node->right);
    }
