Problem 1- Single Element in a Sorted Array
sol-
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int low=0;
        int high = nums.size()-2;
        while(low<=high){
            int mid=(low+high)>>1;
            if(nums[mid]==nums[mid^1]){
                low=mid+1;
            }
            else 
            high = mid-1;
        }
        return nums[low];
    }
};
Problem 2-Search in Rotated Sorted Array
sol-
 int BinarySearch(vector<int>& nums, int target, int start, int end) {
        int l=start, r=end;
        while(l<=r){
            int mid = (l+r)/2;
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] > target){
                r = mid-1;
            }
            else{
                l = mid+1;
            }
        }
        return -1;
    }
    
    int findMin(vector<int>& nums) 
    {
        int n = nums.size();
        int start = 0, end = n-1;
        if(nums[start] < nums[end])
        {
            return 0;
        }
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            int next = (mid+1)%n;
            int prev = (mid + n - 1)%n;
            if(nums[mid] <= nums[next] && nums[mid] <= nums[prev])
            {
                return mid;
            }
            if(nums[mid] <= nums[end])
            {
                end = mid - 1;
            }
            else if(nums[start] <= nums[mid])
            {
                start = mid + 1;
            }
        }
        return -1;
    }
    
    int search(vector<int>& nums, int target) 
    {
        int n = nums.size();
        int min_index = findMin(nums);
        int a1 = BinarySearch(nums , target, 0, min_index - 1);
        int a2 = BinarySearch(nums , target, min_index, n-1);
        if(a1 == -1)
            return a2;
        else
            return a1;
    }
Problem 3-K-th element of two sorted Arrays
sol-
int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        int i=0,j=0,x=0;
        if(k==1)
        return min(arr1[0],arr2[0]);
        while(i<n && j<m){
            
            if(arr1[i]<arr2[j]){
                i++;
                if(i==n)
                break;
            }
            else{
                j++;
                if(j==m)
                break;
            }
            x=i+j+1;
            if(x==k)
            return min(arr1[i],arr2[j]);
             
        }
        x=i+j+1;
        if(i==n){
            while(j<m){
                x=i+j+1;
                if(x==k)
                    return arr2[j];
                j++;
            }
            
        }
        if(j==m){
            while(i<n){
                x=i+j+1;
                if(x==k)
                    return arr1[i];
                i++;
            }
        }
        return -1;
    }
Problem 4-Nth Root of a Number 
sol-
int func(int mid, int n, int m) {
    long long ans = 1;
    for (int i = 1; i <= n; i++) {
        ans = ans * mid;
        if (ans > m) return 2;
    }
    if (ans == m) return 1;
    return 0;
}

int NthRoot(int n, int m) {
    //Use Binary search on the answer space:
    int low = 1, high = m;
    while (low <= high) {
        int mid = (low + high) / 2;
        int midN = func(mid, n, m);
        if (midN == 1) {
            return mid;
        }
        else if (midN == 0) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}
Problem 5-Matrix Median
sol-
int Solution::findMedian(vector<vector > &A) {

for(int i=A.size()-1;i>0;i--){
    for(int j=0;j<A[i].size();j++) A[0].push_back(A[i][j]);
    A[i].clear();
}
sort(A[0].begin(),A[0].end());
return A[0][(A[0].size()/2)];
}
