Problem 1-Kth Largest Element in an Array
sol-
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
         sort(nums.begin() , nums.end() , greater<int>());
        return nums[k-1];
    }
};

Problem 2-Find Median from Data Stream
sol-
class MedianFinder {
    priority_queue<long> maxHeap,minHeap;
public:
    void addNum(int num) {
        if(maxHeap.empty() || maxHeap.top() >= num)
        {
            maxHeap.push(num);
        }else{
            minHeap.push(-num);
        }

        if(maxHeap.size() > minHeap.size() + 1)
        {

            minHeap.push(-maxHeap.top());
            maxHeap.pop();
        }else if(maxHeap.size() < minHeap.size())
        {
            maxHeap.push(-minHeap.top());
            minHeap.pop();
        }
    }
    
    double findMedian() {
        if(maxHeap.size() == minHeap.size())
        {
            return maxHeap.top()/2.0 - minHeap.top()/2.0; 
        }
        return maxHeap.top();
    }
};

Problem 3-Top K Frequent Elements
sol-
vector<int> topKFrequent(vector<int>& nums, int k) {
       unordered_map<int,int> hashmap;
        for (auto num : nums) {
            hashmap[num]++;
        }
        
        priority_queue<pair<int,int>> pq; // By default orders using first element
        for(auto &m : hashmap) {
            pq.push({m.second, m.first});
        }

        vector<int> result;
        while (k > 0) {
            pair<int,int> top = pq.top();
            result.push_back(top.second);
            pq.pop();
            k--;
        }
        return result;  
    }
Problem 4-Most Frequent Even Element
sol-
class Solution {
public:
    int mostFrequentEven(vector<int>& nums) {
        unordered_map<int, int> map;
        int min = 0, counter = 0;

        for(auto num : nums) {
            if(num % 2 == 0) {
                map[num]++;
            }
        }

        for(auto [num, freq] : map) {
            if(freq > counter) {
                counter = freq;
                min = num;
            } else if(freq == counter && num < min) min = num;

        }

        return counter == 0 ? -1 : min;
    }
};
Problem 5-Majority Element II
sol-
 vector<int> majorityElement(vector<int>& nums) {
        int countMajority = nums.size()/3;
        unordered_set<int> set;
        vector<int> output;
        for(auto num : nums){
            int count = 0;
            for(auto element : nums){
                if(element == num){
                    count++;
                }
            }
            if(count > countMajority){
                set.insert(num);
            }
        }
        for(auto it = set.begin(); it != set.end(); it++){
            output.push_back(*it);
        }
        return output;
    }
