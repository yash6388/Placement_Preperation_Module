Problem 1-Implement Stack using Queues
sol-
class MyStack {
public:
    queue<int>q1;
    queue<int>q2;
    MyStack() {
        
    }
    
    void push(int x) {
        q1.push(x);
        
    }
    
    int pop() {
        int size = q1.size();
        while(size>1){
            int x= q1.front();
            q1.pop();
            q1.push(x);
            size--;
        }
        int y = q1.front();
        q1.pop();
        return y;
    }
    
    int top() {
        return q1.back();
    }
    
    bool empty() {
        return q1.empty();
    }
};

Problem 2-Implement Queue using Stacks
sol-
 stack<int> st1;
    stack<int> st2;
    MyQueue() {
        
    }
    
    void push(int x) {
        if(st1.empty())
        {
                st1.push(x);
        }
        else{{
            while(!st1.empty()){
                st2.push(st1.top());
                st1.pop();
            }
              st1.push(x);
            
            while(!st2.empty()){
                  st1.push(st2.top());
                st2.pop();
            }
        }}
    }
    
    int pop() {
        
        int a=st1.top();
        st1.pop();
        
        return a;
        
    }
    
    int peek() {
        
        return st1.top();
        
    }
    
    bool empty() {
        
        if(!st1.empty()){

        return false;
        }
        
        else
            return true;
        
    }
Problem 3-Valid Parentheses
sol-
 bool isValid(string s) {
        stack<char>st;
        for(int i=0;i<s.length();i++){
            if(st.empty())
                st.push(s[i]);
            else if(s[i]==')'){
                if(st.top()!='(')return false;
                else st.pop();
            }
            else if(s[i]=='}'){
                if(st.top()!='{')return false;
                else st.pop();
            }
            else if(s[i]==']'){
                if(st.top()!='[')return false;
                else st.pop();
            }
            else
                st.push(s[i]);
        }
        if(st.empty())return true;
        return false; 
    }
Problem 4-Next Greater Element I
sol-
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        unordered_map<int,int> map;
        for(int i = 0; i < n; i++)
            map[nums2[i]] = i;
        stack<int> s;
        
        for(int i = n-1; i >= 0; i--) {
            while(!s.empty() && s.top() <= nums2[i]) s.pop();
            int temp = nums2[i];
            if(s.empty()) nums2[i] = -1;
            else nums2[i] = s.top();
            s.push(temp);
        }

        for(int i = 0; i < m; i++) {
            int x = nums1[i];
            nums1[i] = nums2[map[x]];
        }
        return nums1;
    }
};
Problem 5-Next Greater Element II
sol-
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n = nums.size();
        stack<int> s;
        
        for(int i = 2*n-1; i >= 0; i--) {
            while(!s.empty() && s.top() <= nums[i%n]) s.pop();
            int temp = nums[i%n];
            if(s.empty()) {
                if(i < n) nums[i] = -1;
            }
            else {
                if(i < n) nums[i] = s.top();
            }
            s.push(temp);
        }
        return nums;
    }
};
