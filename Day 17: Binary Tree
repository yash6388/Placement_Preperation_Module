Problem 1-Binary Tree Inorder Traversal
sol-
  vector<int> ans;
void inorder(TreeNode*& root)
    {

        if( root == NULL)
        {
            return;
        }
        inorder(root -> left);
        ans.push_back(root->val);
        inorder(root -> right);
    }
    vector<int> inorderTraversal(TreeNode* root) 
    {

       inorder(root);
       return ans;
    }
Problem 2-Binary Tree Preorder Traversal
sol-
vector<int> v;
       vector<int> preorderTraversal(TreeNode* root) {
       if(root)
        {   
            v.push_back(root->val);
            preorderTraversal(root->left);
            preorderTraversal(root->right);
        }
       return v;
    }
Problem 3-Binary Tree Postorder Traversal
sol-
vector<int> ans;
void postorder(TreeNode*& root)
    {

        if( root == NULL)
        {
            return;
        }
        postorder(root -> left);
       
        postorder(root -> right);
         ans.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        postorder(root);
        return ans;
    }
Problem 4-Binary Tree Inorder Traversal
sol-
 vector<int> ans;
void inorder(TreeNode*& root)
    {

        if( root == NULL)
        {
            return;
        }
        inorder(root -> left);
        ans.push_back(root->val);
        inorder(root -> right);
    }
    vector<int> inorderTraversal(TreeNode* root) 
    {

       inorder(root);
       return ans;
    }
Problem 5-Maximum Width of Binary Tree
sol-
int widthOfBinaryTree(TreeNode* a) {
        vector<int>v;
    
        if(!a)
        return 0;
        
        int ans = 1;
        queue<pair<TreeNode*,long long int>>q;
        q.push({a,0});

        while(!q.empty())
        {
            int sz = q.size();
            int a1 = 0, b1 = 0;
            int l = 0;
            int mn = q.front().second;
            for(int i = 0; i < sz; i++)
            {
                auto p = q.front();
                TreeNode* b = p.first;
                long long int k = p.second-mn;
                q.pop();
                // leftmost node
                if(i == 0)
                a1 = k;
                // rightmost node
                if(i == sz-1)
                b1 = k;

                if(b->left)
                q.push({b->left,2*k+1});
                
                if(b->right)
                q.push({b->right,2*k+2});
            }
            ans = max(ans,b1-a1+1);
        }

        return ans;
    }
