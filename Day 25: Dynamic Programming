Problem 1-Maximum Product Subarray
sol-
 int maxProduct(vector<int>& nums) {
         int prod=nums[0];
        int maxprod=nums[0];
        int minprod=nums[0];
        int ans=nums[0];
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]<0) {
                swap(minprod,maxprod);
            }
            maxprod=max(maxprod*nums[i],nums[i]);
            minprod=min(minprod*nums[i],nums[i]);
            ans=max(ans,maxprod);
        }
        return ans;
    }
Problem 2-Longest Increasing Subsequence
sol-
int lengthOfLIS(vector<int>& v) {
        vector<int>a;
        a.push_back(v[0]);
        for(int i=1;i<v.size();i++){
            int in=lower_bound(a.begin(),a.end(),v[i])-a.begin();
            if(in>=a.size())a.push_back(v[i]);
            else a[in]=v[i];
        }
        return a.size();
    }
Problem 3-Longest Common Subsequence
sol-
int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int j=0;j<=m;j++) dp[0][j] = 0;
        for(int i=0;i<=n;i++) dp[i][0] = 0;
        for(int i=1;i<=n;i++){
            for (int j = 1; j<=m; j++)
            {
                if (text1[i-1] == text2[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                else dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
    }
Problem 4- 0 - 1 Knapsack Problem
sol-
int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       unordered_map<int,int>mp;
       for(int i=0;i<n;i++){
           mp[val[i]]=wt[i];
       }
       int values=0;
       for(auto it:mp){
           if(it.second<=W){
               values+=it.first;
               W=W-it.second;
           }
       }
       return values;
    }
Problem 5-Edit Distance
sol-
 int minDistance(string word1, string word2) {
        int n = word1.size(), m = word2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
         
       for(int i=0; i<=n; i++) 
        dp[i][0] = i;

       for(int j=0; j<=m; j++)
        dp[0][j] = j; 

        for(int i=1; i<=n; i++) 
        {
            for(int j=1; j<=m; j++)
            {
                if(word1[i-1] == word2[j-1]) //since we are taking 1-based indexing
                 dp[i][j] = dp[i-1][j-1];
                else
                {
                 int insert = 1 + dp[i][j-1];
                 int toDelete = 1 + dp[i-1][j];
                 int replace = 1 + dp[i-1][j-1];
                 dp[i][j] = min({insert,toDelete,replace});
                }
            }
        }
        return dp[n][m];
    }
